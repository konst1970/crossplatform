#
# Cross Platform Virtual Machine
#
# R0 - R255 - 2 bytes, bigendian
#
# Bytecode: 0x00 - idle                             (1 byte)
#           0x01 - Load two bytes to Register B3    (4 bytes), bigendian
#           0x02 - Add B1 and B2 and place to B3    (4 bytes)
#           0x03 - Print B1                         (2 bytes)
#                  for instance 0x05 0x00 prints R1
#           0x04 - if B1 nonzero then jump to next B2 commands (3 bytes)
#           0x05 - Substrate B1 and B2 and place to B3 (4 bytes), bigendian
#           0x06 - if B1 > B2 jump to B3
#           0xA0 - Define a function B1 - function ID, B2 - function length
#           0xA1 - Return from function ID stored in B1
#           0xAA - Call function with ID stored in B1 

Test Outuput:

DEBUG:root:[0, 1, 255, 0, 0, 1, 0, 3, 1, 5, 0, 1, 2, 1, 0, 1, 3, 6, 0, 1, 3, 0, 0, 0, 0, 160, 0, 5, 3, 2, 0, 161, 0, 1, 0, 0, 0, 170, 0, 0, 0, 0, 0, 3, 2, 0]
DEBUG:root:IDLE
DEBUG:root:R0=65280
DEBUG:root:R1=3
DEBUG:root:Rz = Rx - Ry, Rz=65277
DEBUG:root:R3=1
DEBUG:root:Jump if Ra > Rb 65280 3
DEBUG:root:Jump to next Rc 1
DEBUG:root:IDLE
DEBUG:root:IDLE
DEBUG:root:IDLE
DEBUG:root:FUNCTION 0 length 5
DEBUG:root:R0=0
DEBUG:root:CALL 1
DEBUG:root:F {'id': 0, 'length': 5, 'addr': 25, 'return_addr': 39}
DEBUG:root:count 28 bytecode 3
DEBUG:root:PRINT
DEBUG:root:R 2=65277
DEBUG:root:IDLE
DEBUG:root:RETURN FROM FUNCTION ID 0
DEBUG:root:RETURN 39
DEBUG:root:BYTECODE 0
DEBUG:root:IDLE
DEBUG:root:IDLE
DEBUG:root:IDLE
DEBUG:root:IDLE
DEBUG:root:PRINT
DEBUG:root:R 2=65277
DEBUG:root:IDLE
DEBUG:root:bytecode is completed
65277
65277

